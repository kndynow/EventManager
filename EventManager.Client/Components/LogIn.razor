@using Models.Login;
@using Models.Jwt;
@inject HttpClient httpClient;
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject CustomAuthenticationStateProvider AuthStateProvider;

<EditForm Model="@LoginViewModel" OnValidSubmit="HandleLogin">
	<div class="container">
		<DataAnnotationsValidator />

		<h1>Login</h1>
		<div class="form-group">
			<label for="UserName">Username:</label>
			<InputText class="input" id="UserName" @bind-Value="LoginViewModel.UserName" />
			<ValidationMessage For="@(() => LoginViewModel.UserName)" />
		</div>

		<div class="form-group">
			<label for="password">Password:</label>
			<InputText class="input" id="password" type="password" @bind-Value="LoginViewModel.Password" />
			<ValidationMessage For="@(() => LoginViewModel.Password)" />
		</div>

		@if (!string.IsNullOrEmpty(Message))
		{
				<div class="@MessageClass">@Message</div>
		}

		<button type="submit" class="btn">Log In</button>

		<div class="form-group sign-up-group">
			<p>Don't have an account? <NavLink href="/signup">Sign up here</NavLink></p>
		</div>
	</div>
</EditForm>
@code {
	

	[SupplyParameterFromForm]
	private LoginViewModel LoginViewModel { get; set; } = new LoginViewModel();

	private string? Message;
	private string MessageClass;

	private async Task HandleLogin()
	{
		var response = await httpClient.PostAsJsonAsync("https://localhost:7206/auth/login", new
		{
			Username = LoginViewModel.UserName,
			Password = LoginViewModel.Password
		});

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

			if (result != null)
			{
				await AuthStateProvider.Login(result.Token); // Use AuthStateProvider to store JWT and update authentication state

				Navigation.NavigateTo("/home");
			}
		}
		else
		{
			MessageClass = "unsuccessful-login";
			Message = "Invalid username or password.";
		}
	}
}
