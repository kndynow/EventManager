@page "/admindashboard"
@page "/eventdashboard"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@attribute [Authorize(Roles = "Admin")]
@using EventManager.Client.Components.Admin
@using EventManager.Client.Models
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Manage Events</h1>

@if (!showForm)
{
    <button class="btn btn-primary" @onclick="HandleCreate">Publish New Event</button>
    <EventList Events="events" OnEdit="HandleEdit"/>
    
}
else
{
        <GenericForm TItem="Event">
            <HeaderTemplate>
                 <h3>@(isNew ? "Create New Event" : "Edit Event")</h3>
            </HeaderTemplate>
            <ChildContent>
                <EventForm 
                 Event="_event"
                IsNew="isNew"
                 OnSubmit="
                 HandleSubmit"
             OnCancel="HandleCancel"
              OnDelete="HandleDelete"/>
        </ChildContent>
    </GenericForm>
}

@code {
    private bool isNew = true;
    private bool showForm = false;
    private List<Event> events = [];
    private Event _event = new()
    {
        Name = "Nytt event",
        Description = "",
        Location = "",
        ShortDescription = "",
        ImageUrl = "",
        StartTime = DateTime.UtcNow,
        EndTime = DateTime.UtcNow,
        CreatedAt = DateTime.UtcNow,
        IsActive = true,
        Type = EventType.Concert,
        MaxAttendees = 100,
        AvailableTickets = 100,
        Price = 0,

    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await HttpClient.GetFromJsonAsync<List<Event>>("/events") ?? [];
                
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
            events = [];
        }
    }
    
    //Create Event
    private async Task HandleCreate()
    {
        _event = new()
        {
            Name = "Nytt event",
            Description = "",
            Location = "",
            Price = 0,
            AvailableTickets = 100,
            Type = EventType.Concert,
            IsActive = true,
            CreatedAt = DateTime.UtcNow,
            StartTime = DateTime.UtcNow,
            EndTime = DateTime.UtcNow.AddHours(1),
            MaxAttendees = 100
        };
        isNew = true;
        showForm = true;
    }

    //Update Event
    private async Task HandleEdit(string id)
    {
        try
        {
            var eventToEdit = await HttpClient.GetFromJsonAsync<Event>($"/events/{id}");
            if (eventToEdit != null)
            {
                _event = eventToEdit;
                isNew = false;
                showForm = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing event: {ex.Message}");
        }
    }

    // Submit Event
    private async Task HandleSubmit()
    {
        if (isNew)
        {
            try
            {
                await HttpClient.PostAsJsonAsync("/events", _event);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating event: {ex.Message}");
            }
        }
        else
        {
            try
            {
                await HttpClient.PatchAsJsonAsync($"/events/{_event.Id}", _event);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating event: {ex.Message}");
            }
        }
        events = await HttpClient.GetFromJsonAsync<List<Event>>("/events") ?? [];
        showForm = false;
    }

    // Cancel create/update
    private void HandleCancel()
    {
        showForm = false;
    }

    // Delete Event
    private async Task HandleDelete(string id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"/events/{_event.Id}");
            if (response.IsSuccessStatusCode)
            {
                events = await HttpClient.GetFromJsonAsync<List<Event>>("/events") ?? [];
                showForm = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
        
    }
}
