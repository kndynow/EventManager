@using EventManager.Client.Models

<EditForm Model="Event" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="Event.Name" placeholder="Enter event name" />
        <ValidationMessage For="@(() => Event.Name)" />
    </div>

    <div class="form-group mb-3">
        <label for="desc">Description</label>
        <InputTextArea id="desc" class="form-control" @bind-Value="Event.Description" placeholder="Enter description" />
        <ValidationMessage For="@(() => Event.Description)" />
    </div>

    <div class="form-group mb-3">
        <label for="timestart">Event Start</label>
        <InputDate id="timestart" class="form-control" @bind-Value="Event.Start" />
        <ValidationMessage For="@(() => Event.Start)" />
    </div>

    <div class="form-group mb-3">
        <label for="timeend">Event End</label>
        <InputDate id="timeend" class="form-control" @bind-Value="Event.End" />
        <ValidationMessage For="@(() => Event.End)" />
    </div>

    <div class="form-group mb-3">
        <label for="location">Location</label>
        <InputText id="location" class="form-control" @bind-Value="Event.Location" placeholder="Enter event location" />
        <ValidationMessage For="@(() => Event.Location)" />
    </div>

    <div class="form-group mb-3">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="Event.Price" />
        <ValidationMessage For="@(() => Event.Price)" />
    </div>

    <div class="form-group mb-3">
        <label for="availableTickets">Available Tickets</label>
        <InputNumber id="availableTickets" class="form-control" @bind-Value="Event.AvailableTickets" />
        <ValidationMessage For="@(() => Event.AvailableTickets)" />
    </div>

    <div class="form-group mb-3">
        <label for="maxAttendees">Maximum Attendees</label>
        <InputNumber id="maxAttendees" class="form-control" @bind-Value="Event.MaxAttendees" />
        <ValidationMessage For="@(() => Event.MaxAttendees)" />
    </div>

    <div class="form-group mb-3">
        <label for="category">Category</label>
        <InputText id="category" class="form-control" @bind-Value="Event.Category" placeholder="Enter event category" />
        <ValidationMessage For="@(() => Event.Category)" />
    </div>

    <div class="form-group mb-3">
        <label for="imageUrl">Image URL</label>
        <InputText id="imageUrl" class="form-control" @bind-Value="Event.ImageUrl" placeholder="Enter image URL" />
        <ValidationMessage For="@(() => Event.ImageUrl)" />
    </div>

    <div class="form-group mb-3">
        <div class="form-check">
            <InputCheckbox id="isActive" class="form-check-input" @bind-Value="Event.IsActive" />
            <label class="form-check-label" for="isActive">Active</label>
        </div>
    </div>

    <div class="button-group mt-4">
        <button type="submit" class="btn btn-primary me-2">
            @(IsNew ? "Publish Event" : "Save Changes")
        </button>

        <button type="button" class="btn btn-secondary me-2" @onclick="OnCancel">
            Cancel
        </button>

        @if (!IsNew)
        {
            <button type="button" class="btn btn-danger" @onclick="HandleDelete">
                Delete Event
            </button>
        }
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Event Event { get; set; }

    [Parameter]
    public bool IsNew { get; set; } = true;

    [Parameter]
    public EventCallback<Event> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private async Task HandleSubmit()
    {
        if (Event != null)
        {
            Event.UpdatedAt = DateTime.Now;
            await OnSubmit.InvokeAsync(Event);
        }
    }

    private async Task HandleDelete()
    {
        if (Event != null && !IsNew)
        {
            await OnDelete.InvokeAsync(Event.Id);
        }
    }
}
