@page "/events/{Id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using EventManager.Client.Models
@using EventManager.Client.Services
@inject HttpClient HttpClient
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<div class="container">
	@if (evt is null)
	{
		<div class="text-center">
			<div class="spinner-border" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>
	}
	else
	{
		<div class="back-button mb-4">
			<a href="/#upcoming-events" class="btn btn-outline-secondary">
				<i class="bi bi-arrow-left"></i> Back to Events
			</a>
		</div>
		<div class="row g-4">
			<div class="col-md-6">
				<div class="card h-100 border-0">
					<div class="card-body p-0">
						<div class="image-container">
							<img src="@evt.ImageUrl" class="img-fluid" alt="@evt.Name">
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-6">
				<div class="card h-100 border-0">
					<div class="card-body">
						<h1 class="card-title">@evt.Name</h1>
						<div class="card mb-4 border-0">
							<div class="card-body">
								<ul class="list-unstyled">
									<li><strong>Date:</strong> @evt.StartTime.ToString("MMMM d, yyyy")</li>
									<li><strong>Time:</strong> @evt.StartTime.ToString("HH:mm")</li>
									<li><strong>Location:</strong> @evt.Location</li>
									<li><strong>Price:</strong> @evt.Price.ToString("N0") Kr</li>
								</ul>
							</div>
						</div>
						<div class="card border-0">
							<div class="card-body">
								<h5 class="card-title">Book Tickets</h5>
								<EditForm Model="@booking" OnValidSubmit="HandleSubmit">
									<DataAnnotationsValidator />

									<div class="form-group">
										<label for="quantity" class="form-label">Number of Tickets</label>
										<InputNumber id="quantity" class="form-control"
											@bind-Value="@booking.TicketCount" min="0" max="5" />
										<ValidationMessage For="@(() => booking.TicketCount)" />
										@if (booking.TicketCount >= 5)
										{
											<div class="text-danger">Maximum 5 tickets per account</div>
										}
									</div>

									<div class="ticket-limit">Total tickets available: @evt.AvailableTickets</div>
									<div class="total-price">
										Total: <span class="price-number">@(evt.Price* booking.TicketCount)</span> Kr
									</div>

									<button type="submit" class="btn btn-primary" disabled="@(booking.TicketCount <= 0 || booking.TicketCount > 5)">Book Now</button>

									@if (!string.IsNullOrEmpty(Message))
									{
										<div class="@MessageClass">@Message</div>
									}
								</EditForm>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row mt-4">
			<div class="col-12">
				<div class="card border-0">
					<div class="card-body">
						<h5 class="card-title">Description</h5>
						<p class="card-text">
							@(new MarkupString(evt.Description.Replace("\n\n", "<br><br>")))
						</p>
					</div>
				</div>
			</div>
		</div>
	}
</div>


@code {

	[Parameter]
	public string Id { get; set; }
	private Event evt;
	private string? userId;
	private Booking booking = new();
	private string? Message;
	private string? MessageClass;

	private decimal CalculateTotalPrice => evt?.Price * booking.TicketCount ?? 0;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Fetch the event
			evt = await HttpClient.GetFromJsonAsync<Event>($"/events/{Id}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching event: {ex.Message}");
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task HandleSubmit()
	{
		try
		{
			// Check if there are enough tickets available
			if (booking.TicketCount > evt.AvailableTickets)
			{
				MessageClass = "booking-unsuccsesful";
				Message = "Not enough tickets available.";
				return;
			}
			userId = await AuthService.GetUserId();

			if (string.IsNullOrEmpty(userId))
			{
				MessageClass = "booking-unsuccsesful";
				Message = "Failed to book tickets. User ID not found.";
				return;
			}
			// Create a new booking
			var response = await HttpClient.PostAsJsonAsync($"/users/{userId}/bookings", new
			{
				EventId = evt.Id,
				TicketCount = booking.TicketCount,
				TotalPrice = CalculateTotalPrice
			});
			// Check if the booking was successful
			if (response.IsSuccessStatusCode)
			{
				// Update the event's available tickets
				evt.AvailableTickets -= booking.TicketCount;
				MessageClass = "booking-successful";
				Message = "Tickets booked successfully!";
			}
			else
			{
				Console.WriteLine($"Booking failed");
				MessageClass = "booking-unsuccsesful";
				Message = "Failed to book tickets. Please try again later.";
			}
		}
		catch (Exception ex)
		{
			MessageClass = "booking-unsuccsesful";
			Message = "Failed to book tickets. Please try again later.";
			Console.WriteLine($"Catch-block: Error booking tickets: {ex.Message}");
		}
	}
}
